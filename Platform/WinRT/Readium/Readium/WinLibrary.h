//
//  WinLibrary.h
//  Readium
//
//  Created by Jim Dovey on 2013-09-26.
//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this 
//  list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation and/or 
//  other materials provided with the distribution.
//  3. Neither the name of the organization nor the names of its contributors may be 
//  used to endorse or promote products derived from this software without specific 
//  prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef __Readium_Library_h__
#define __Readium_Library_h__

#include "Readium.h"
#include <ePub3/library.h>

using ::Platform::String;
using ::Windows::Storage::IStorageFile;
using ::Windows::Foundation::IAsyncOperation;
using ::Windows::Foundation::IAsyncAction;
using ::Windows::Foundation::Uri;

BEGIN_READIUM_API

ref class Container;
ref class Package;
ref class ManifestItem;
ref class CFI;
interface class IClosableStream;

/**
  <summary>
  <para>
  This is a library in the smallest sense: it keeps track of ePub files
  by their unique-identifier, storing the path to that ePub file *as given*. Its
  primary presence here is to allow for inter-publication linking. It is also
  designed to be subclassed in order to serve as the basis of a complete library
  in an application, with all the additional functionality that would involve.
  </para>
  <para>
  Note that each application would have a single library, accessible only through
  the MainLibrary() static method. A library can optionally be written out to
  disk and then loaded back in by calling MainLibrary() with a Locator instance
  at application startup. Once the singleton instance has been created,
  MainLibrary() will ignore its argument and always return that instance.
  </para>
  </summary>
  <remarks>
  Thoughts: OCF allows for multiple packages to be specified, but I don't see any
  handling of that in ePub3 CFI?
  </remarks>
 */
public ref class Library sealed
{
private:
	/// Creates a library object from a native Library.
	Library(::ePub3::Library* native);

public:
	/// Creates or returns the singleton Library instance.
	static Library^ MainLibrary();

	/// Returns the singleton Library instance by loadin from a saved file.
	/// <param name="savedLibrary">A file generated by WriteToFile().</param>
	/// <returns>The single Library instance for this application.</returns>
	static IAsyncOperation<Library^>^ LoadLibrary(IStorageFile^ savedLibrary);

	virtual ~Library() {}

	/// Returns the location of a known ePub file corresponding to a Unique ID.
	/// <param name="uniqueID">The unique ID of a Package object.</param>
	/// <returns>A file object, or nullptr if the unique ID is unknown.</results>
	IAsyncOperation<IStorageFile^>^ FileForEPubWithUniqueID(String^ uniqueID);

	/// Returns the location of a known ePub file corresponding to a Package ID.
	/// <param name="uniqueID">The package ID of a Package object.</param>
	/// <returns>A file object, or nullptr if the package ID is unknown.</results>
	IAsyncOperation<IStorageFile^>^ FileForEPubWithPackageID(String^ packageID);

	void AddPublicationsInContainer(Container^ container, IStorageFile^ file);
	IAsyncAction^ AddPublicationsInContainer(IStorageFile^ file);

	Uri^ EPubURLForPublication(Package^ pkg);
	Uri^ EPubURLForPackageID(String^ packageID);

	IAsyncOperation<Package^>^ LoadPackage(Uri^ epubURL);
	IAsyncOperation<Package^>^ LoadPackage(Uri^ ePubURL, bool allowLoad);

	Uri^ EPubCFIURLForManifestItem(ManifestItem^ item);
	ManifestItem^ ManifestItemForCFIURL(Uri^ urlWithCFI, _Out_ CFI^ remainingCFI);
	IClosableStream^ StreamForEPubURL(Uri^ urlWithCFI, _Out_ CFI^ remainingCFI);

	IAsyncAction^ WriteToFile(IStorageFile^ file);

};

END_READIUM_API

#endif	/* __Readium_Streams_h__ */
